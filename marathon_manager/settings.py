"""
Django settings for marathon_manager project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

from django.urls import reverse

try:
    import local_settings as local
except ImportError:
    import example_local as local

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = local.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = local.DEBUG

ALLOWED_HOSTS = local.ALLOWED_HOSTS


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4',
    'django_markdown2',
    'social_django',
    'submissions.apps.SubmissionsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.twitch.TwitchOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    # Run our custom pipeline function to check if Twitch users logging in are superusers or event admin staff.
    'submissions.pipeline.check_twitch_user_permissions',
)

ROOT_URLCONF = 'marathon_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marathon_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = local.DATABASES


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console_production': {
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_false'],
            'level': 'WARNING',
        },
        'console_debug': {
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'level': 'DEBUG',
        },
    },
    'loggers': {
        # Log warning and higher to stdout/stderr for capture in production.
        'django': {
            'handlers': ['console_debug', 'console_production'],
        },
        'submissions': {
            'handlers': ['console_debug', 'console_production'],
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = local.TIME_ZONE

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Session settings.
SESSION_COOKIE_AGE = 60 * 60 * 24 * 2  # 2 days


# Login URL overrides.  Use homepage as the "login URL" to make the user click the Twitch auth button.
LOGIN_REDIRECT_URL = 'submissions:home'
LOGIN_URL = 'submissions:home'
LOGOUT_REDIRECT_URL = 'submissions:home'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = local.STATIC_URL
STATIC_ROOT = local.STATIC_ROOT


# Twitch login settings.  Get display name and profile pic as extra data to show here.
SOCIAL_AUTH_TWITCH_KEY = local.SOCIAL_AUTH_TWITCH_KEY
SOCIAL_AUTH_TWITCH_SECRET = local.SOCIAL_AUTH_TWITCH_SECRET
SOCIAL_AUTH_TWITCH_EXTRA_DATA = [
    'name',
    'display_name',
    'logo',
]

# Extra data fields that can be searched for using the admin search.
SOCIAL_AUTH_ADMIN_SEARCH_FIELDS = [
    'name',
    'display_name',
]


# Marathon admin/superusers.
MARATHON_ADMINS = local.MARATHON_ADMINS
MARATHON_SUPERUSERS = local.MARATHON_SUPERUSERS
